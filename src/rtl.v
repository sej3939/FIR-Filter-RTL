// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.1_2/1049935 Production Release
//  HLS Date:       Sat Jun 10 10:53:51 PDT 2023
// 
//  Generated by:   sj3939@hansolo.poly.edu
//  Generated date: Tue Dec 10 07:14:28 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    fir_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module fir_core_core_fsm (
  clk, rst, fsm_output, Shift_Accum_Loop_C_6_tr0
);
  input clk;
  input rst;
  output [8:0] fsm_output;
  reg [8:0] fsm_output;
  input Shift_Accum_Loop_C_6_tr0;


  // FSM State Type Declaration for fir_core_core_fsm_1
  parameter
    main_C_0 = 4'd0,
    Shift_Accum_Loop_C_0 = 4'd1,
    Shift_Accum_Loop_C_1 = 4'd2,
    Shift_Accum_Loop_C_2 = 4'd3,
    Shift_Accum_Loop_C_3 = 4'd4,
    Shift_Accum_Loop_C_4 = 4'd5,
    Shift_Accum_Loop_C_5 = 4'd6,
    Shift_Accum_Loop_C_6 = 4'd7,
    main_C_1 = 4'd8;

  reg [3:0] state_var;
  reg [3:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : fir_core_core_fsm_1
    case (state_var)
      Shift_Accum_Loop_C_0 : begin
        fsm_output = 9'b000000010;
        state_var_NS = Shift_Accum_Loop_C_1;
      end
      Shift_Accum_Loop_C_1 : begin
        fsm_output = 9'b000000100;
        state_var_NS = Shift_Accum_Loop_C_2;
      end
      Shift_Accum_Loop_C_2 : begin
        fsm_output = 9'b000001000;
        state_var_NS = Shift_Accum_Loop_C_3;
      end
      Shift_Accum_Loop_C_3 : begin
        fsm_output = 9'b000010000;
        state_var_NS = Shift_Accum_Loop_C_4;
      end
      Shift_Accum_Loop_C_4 : begin
        fsm_output = 9'b000100000;
        state_var_NS = Shift_Accum_Loop_C_5;
      end
      Shift_Accum_Loop_C_5 : begin
        fsm_output = 9'b001000000;
        state_var_NS = Shift_Accum_Loop_C_6;
      end
      Shift_Accum_Loop_C_6 : begin
        fsm_output = 9'b010000000;
        if ( Shift_Accum_Loop_C_6_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = Shift_Accum_Loop_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 9'b100000000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 9'b000000001;
        state_var_NS = Shift_Accum_Loop_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    fir_core
// ------------------------------------------------------------------


module fir_core (
  clk, rst, y_rsc_dat, y_triosy_lz, x_rsc_dat, x_triosy_lz
);
  input clk;
  input rst;
  output [31:0] y_rsc_dat;
  output y_triosy_lz;
  input [31:0] x_rsc_dat;
  output x_triosy_lz;


  // Interconnect Declarations
  reg [31:0] y_rsci_idat;
  wire [31:0] x_rsci_idat;
  wire [8:0] fsm_output;
  wire [3:0] Shift_Accum_Loop_acc_5_tmp;
  wire [4:0] nl_Shift_Accum_Loop_acc_5_tmp;
  wire [2:0] Shift_Accum_Loop_else_acc_4_tmp;
  wire [3:0] nl_Shift_Accum_Loop_else_acc_4_tmp;
  wire [2:0] Shift_Accum_Loop_else_acc_tmp;
  wire [3:0] nl_Shift_Accum_Loop_else_acc_tmp;
  wire or_dcpl_15;
  wire or_dcpl_17;
  wire and_dcpl_11;
  wire or_tmp_13;
  wire or_tmp_14;
  wire or_tmp_15;
  reg Shift_Accum_Loop_unequal_tmp;
  reg [2:0] i_3_1_sva;
  reg Shift_Accum_Loop_slc_Shift_Accum_Loop_5_acc_1_4_1_psp_sva_3;
  reg reg_x_triosy_obj_ld_cse;
  wire Shift_Accum_Loop_Shift_Accum_Loop_or_cse;
  wire Shift_Accum_Loop_else_and_m1c;
  wire Shift_Accum_Loop_else_and_m1c_1;
  wire reg_y_and_cse;
  wire [31:0] z_out;
  wire signed [43:0] nl_z_out;
  wire [31:0] z_out_1;
  wire [32:0] nl_z_out_1;
  wire [31:0] z_out_2;
  wire [32:0] nl_z_out_2;
  reg [31:0] shift_reg_15_lpi_2;
  reg [31:0] shift_reg_8_1_lpi_2;
  reg [31:0] shift_reg_10_1_lpi_2;
  reg [31:0] shift_reg_4_1_lpi_2;
  reg [31:0] shift_reg_2_lpi_2;
  reg [31:0] shift_reg_14_1_lpi_2;
  reg [31:0] shift_reg_7_1_lpi_2;
  reg [31:0] shift_reg_9_1_lpi_2;
  reg [31:0] shift_reg_3_1_lpi_2;
  reg [31:0] shift_reg_13_1_lpi_2;
  reg [31:0] shift_reg_1_lpi_2;
  reg [31:0] shift_reg_0_lpi_2;
  reg [31:0] shift_reg_6_1_lpi_2;
  reg [31:0] shift_reg_12_1_lpi_2;
  reg [31:0] shift_reg_5_1_lpi_2;
  reg [31:0] shift_reg_11_1_lpi_2;
  reg [31:0] x_sva;
  reg [31:0] acc_1_sva;
  reg [31:0] Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_1_sva;
  reg [7:0] Shift_Accum_Loop_else_slc_c_rom_1_9_8_1_3_sva;
  reg Shift_Accum_Loop_else_slc_c_rom_1_9_0_3_sva;
  reg [31:0] Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_5_sva;
  reg Shift_Accum_Loop_else_slc_c_rom_1_9_0_5_sva;
  reg [31:0] Shift_Accum_Loop_3_else_mul_itm;
  reg [25:0] Shift_Accum_Loop_if_acc_2_itm_31_6;
  wire [26:0] nl_Shift_Accum_Loop_if_acc_2_itm_31_6;
  wire [31:0] Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_5_sva_mx0w0;
  wire [31:0] Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_1_sva_1;
  wire [31:0] Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_3_sva_1;
  wire [31:0] Shift_Accum_Loop_6_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_1;
  wire [31:0] Shift_Accum_Loop_4_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_1;
  wire [31:0] Shift_Accum_Loop_2_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_2;
  wire ROM_1i4_1o1_1e46b35caa07da454b89170b85ee29092e_1;
  wire ROM_1i3_1o1_f7ba941876a382c68fe43bcd1ee66d4b2f_1;
  wire [7:0] ROM_1i3_1o8_133a9585274dfea49db057dda259647a2f_1;
  wire [7:0] ROM_1i4_1o8_955be7665f071fc6a758ae941ce549492e_1;
  wire [7:0] ROM_1i3_1o8_2d123223ee79ddb35a7e944ae29bbc822e_1;
  wire ROM_1i3_1o1_5732f0ee6b7576225f9c4c2ad0c12dfd2f_1;
  reg Shift_Accum_Loop_5_else_slc_c_rom_1_Shift_Accum_Loop_else_slc_i_4_0_1_tmp_10_9_2_sdt_sva_7;
  reg [1:0] Shift_Accum_Loop_5_else_slc_c_rom_1_Shift_Accum_Loop_else_slc_i_4_0_1_tmp_10_9_2_sdt_sva_4_3;
  reg [1:0] Shift_Accum_Loop_5_else_slc_c_rom_1_Shift_Accum_Loop_else_slc_i_4_0_1_tmp_10_9_2_sdt_sva_1_0;
  wire and_30_cse;
  wire and_32_cse;
  wire or_cse;

  wire[31:0] c_c_mux_nl;
  wire[31:0] Shift_Accum_Loop_3_else_acc_2_nl;
  wire[32:0] nl_Shift_Accum_Loop_3_else_acc_2_nl;
  wire c_or_nl;
  wire acc_not_nl;
  wire not_44_nl;
  wire and_86_nl;
  wire[1:0] Shift_Accum_Loop_else_acc_8_nl;
  wire[2:0] nl_Shift_Accum_Loop_else_acc_8_nl;
  wire Shift_Accum_Loop_else_or_nl;
  wire Shift_Accum_Loop_else_and_23_nl;
  wire Shift_Accum_Loop_else_and_24_nl;
  wire Shift_Accum_Loop_else_mux1h_24_nl;
  wire[1:0] Shift_Accum_Loop_else_mux1h_25_nl;
  wire[1:0] Shift_Accum_Loop_else_mux1h_26_nl;
  wire Shift_Accum_Loop_else_Shift_Accum_Loop_else_or_2_nl;
  wire Shift_Accum_Loop_else_mux_17_nl;
  wire[1:0] Shift_Accum_Loop_else_mux1h_27_nl;
  wire Shift_Accum_Loop_else_Shift_Accum_Loop_else_and_2_nl;
  wire Shift_Accum_Loop_else_mux_18_nl;
  wire Shift_Accum_Loop_else_mux1h_28_nl;
  wire[31:0] Shift_Accum_Loop_else_mux1h_29_nl;
  wire[31:0] Shift_Accum_Loop_else_mux1h_30_nl;
  wire[31:0] Shift_Accum_Loop_else_mux1h_31_nl;
  wire[25:0] Shift_Accum_Loop_if_mux_6_nl;
  wire[1:0] Shift_Accum_Loop_if_mux_7_nl;
  wire[3:0] Shift_Accum_Loop_if_mux_8_nl;
  wire[29:0] Shift_Accum_Loop_if_mux_9_nl;
  wire[1:0] Shift_Accum_Loop_if_mux_10_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [3:0] nl_U_ROM_1i4_1o1_1e46b35caa07da454b89170b85ee29092e_rg_I_1;
  assign nl_U_ROM_1i4_1o1_1e46b35caa07da454b89170b85ee29092e_rg_I_1 = {Shift_Accum_Loop_else_slc_c_rom_1_9_0_3_sva
      , i_3_1_sva};
  wire [2:0] nl_U_ROM_1i3_1o1_f7ba941876a382c68fe43bcd1ee66d4b2f_rg_I_1;
  assign nl_U_ROM_1i3_1o1_f7ba941876a382c68fe43bcd1ee66d4b2f_rg_I_1 = {(Shift_Accum_Loop_else_acc_4_tmp[2])
      , 1'b1 , (Shift_Accum_Loop_else_acc_4_tmp[0])};
  wire [2:0] nl_U_ROM_1i3_1o8_133a9585274dfea49db057dda259647a2f_rg_I_1;
  assign nl_U_ROM_1i3_1o8_133a9585274dfea49db057dda259647a2f_rg_I_1 = {(Shift_Accum_Loop_else_acc_4_tmp[2])
      , 1'b1 , (Shift_Accum_Loop_else_acc_4_tmp[0])};
  wire [3:0] nl_U_ROM_1i4_1o8_955be7665f071fc6a758ae941ce549492e_rg_I_1;
  assign nl_U_ROM_1i4_1o8_955be7665f071fc6a758ae941ce549492e_rg_I_1 = {Shift_Accum_Loop_else_slc_c_rom_1_9_0_3_sva
      , i_3_1_sva};
  ccs_out_v1 #(.rscid(32'sd1),
  .width(32'sd32)) y_rsci (
      .idat(y_rsci_idat),
      .dat(y_rsc_dat)
    );
  ccs_in_v1 #(.rscid(32'sd2),
  .width(32'sd32)) x_rsci (
      .dat(x_rsc_dat),
      .idat(x_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) y_triosy_obj (
      .ld(reg_x_triosy_obj_ld_cse),
      .lz(y_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) x_triosy_obj (
      .ld(reg_x_triosy_obj_ld_cse),
      .lz(x_triosy_lz)
    );
  ROM_1i4_1o1_a4ffe79816706630c406f023e101abc4ba  U_ROM_1i4_1o1_1e46b35caa07da454b89170b85ee29092e_rg
      (
      .I_1(nl_U_ROM_1i4_1o1_1e46b35caa07da454b89170b85ee29092e_rg_I_1[3:0]),
      .O_1(ROM_1i4_1o1_1e46b35caa07da454b89170b85ee29092e_1)
    );
  ROM_1i3_1o1_864e2d8b3fa5a476061efa2fc00d8638bb  U_ROM_1i3_1o1_f7ba941876a382c68fe43bcd1ee66d4b2f_rg
      (
      .I_1(nl_U_ROM_1i3_1o1_f7ba941876a382c68fe43bcd1ee66d4b2f_rg_I_1[2:0]),
      .O_1(ROM_1i3_1o1_f7ba941876a382c68fe43bcd1ee66d4b2f_1)
    );
  ROM_1i3_1o8_54787253a812cd567bb92f9d6890c214bb  U_ROM_1i3_1o8_133a9585274dfea49db057dda259647a2f_rg
      (
      .I_1(nl_U_ROM_1i3_1o8_133a9585274dfea49db057dda259647a2f_rg_I_1[2:0]),
      .O_1(ROM_1i3_1o8_133a9585274dfea49db057dda259647a2f_1)
    );
  ROM_1i4_1o8_49d2b8e49cdb5af87eb57656b2896b16ba  U_ROM_1i4_1o8_955be7665f071fc6a758ae941ce549492e_rg
      (
      .I_1(nl_U_ROM_1i4_1o8_955be7665f071fc6a758ae941ce549492e_rg_I_1[3:0]),
      .O_1(ROM_1i4_1o8_955be7665f071fc6a758ae941ce549492e_1)
    );
  ROM_1i3_1o8_7d627d1582f0a01893c653364d1937e3ba  U_ROM_1i3_1o8_2d123223ee79ddb35a7e944ae29bbc822e_rg
      (
      .I_1(Shift_Accum_Loop_else_acc_tmp),
      .O_1(ROM_1i3_1o8_2d123223ee79ddb35a7e944ae29bbc822e_1)
    );
  ROM_1i3_1o1_cb6645cbf5b78ee58f2b0d0f43368631bb  U_ROM_1i3_1o1_5732f0ee6b7576225f9c4c2ad0c12dfd2f_rg
      (
      .I_1(Shift_Accum_Loop_else_acc_tmp),
      .O_1(ROM_1i3_1o1_5732f0ee6b7576225f9c4c2ad0c12dfd2f_1)
    );
  fir_core_core_fsm fir_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .Shift_Accum_Loop_C_6_tr0(Shift_Accum_Loop_slc_Shift_Accum_Loop_5_acc_1_4_1_psp_sva_3)
    );
  assign or_cse = (fsm_output[8]) | (fsm_output[0]);
  assign reg_y_and_cse = Shift_Accum_Loop_slc_Shift_Accum_Loop_5_acc_1_4_1_psp_sva_3
      & (fsm_output[7]);
  assign and_30_cse = Shift_Accum_Loop_unequal_tmp & (fsm_output[3]);
  assign and_32_cse = (~ Shift_Accum_Loop_unequal_tmp) & (fsm_output[3]);
  assign Shift_Accum_Loop_Shift_Accum_Loop_or_cse = (Shift_Accum_Loop_else_acc_4_tmp!=3'b000);
  assign nl_Shift_Accum_Loop_else_acc_8_nl = ({1'b1 , (Shift_Accum_Loop_else_acc_4_tmp[0])})
      + 2'b11;
  assign Shift_Accum_Loop_else_acc_8_nl = nl_Shift_Accum_Loop_else_acc_8_nl[1:0];
  assign Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_5_sva_mx0w0
      = MUX_v_32_3_2x0(shift_reg_11_1_lpi_2, shift_reg_5_1_lpi_2, Shift_Accum_Loop_else_acc_8_nl);
  assign nl_Shift_Accum_Loop_else_acc_4_tmp = Shift_Accum_Loop_else_acc_tmp + 3'b111;
  assign Shift_Accum_Loop_else_acc_4_tmp = nl_Shift_Accum_Loop_else_acc_4_tmp[2:0];
  assign nl_Shift_Accum_Loop_acc_5_tmp = conv_u2u_3_4(Shift_Accum_Loop_else_acc_4_tmp)
      + 4'b1111;
  assign Shift_Accum_Loop_acc_5_tmp = nl_Shift_Accum_Loop_acc_5_tmp[3:0];
  assign Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_1_sva_1
      = MUX_v_32_8_2x0x2x3x5x6(shift_reg_3_1_lpi_2, shift_reg_9_1_lpi_2, shift_reg_15_lpi_2,
      Shift_Accum_Loop_else_acc_tmp);
  assign Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_3_sva_1
      = MUX_v_32_7_2x1x2x4x5(shift_reg_1_lpi_2, shift_reg_7_1_lpi_2, shift_reg_13_1_lpi_2,
      Shift_Accum_Loop_else_acc_4_tmp);
  assign nl_Shift_Accum_Loop_else_acc_tmp = i_3_1_sva + 3'b111;
  assign Shift_Accum_Loop_else_acc_tmp = nl_Shift_Accum_Loop_else_acc_tmp[2:0];
  assign Shift_Accum_Loop_else_and_m1c = (Shift_Accum_Loop_acc_5_tmp[1:0]==2'b01);
  assign Shift_Accum_Loop_else_and_m1c_1 = (Shift_Accum_Loop_acc_5_tmp[1:0]==2'b10);
  assign Shift_Accum_Loop_else_or_nl = ((~ or_dcpl_17) & Shift_Accum_Loop_else_and_m1c)
      | ((~ or_dcpl_15) & Shift_Accum_Loop_else_and_m1c_1);
  assign Shift_Accum_Loop_else_and_23_nl = or_dcpl_17 & Shift_Accum_Loop_else_and_m1c;
  assign Shift_Accum_Loop_else_and_24_nl = or_dcpl_15 & Shift_Accum_Loop_else_and_m1c_1;
  assign Shift_Accum_Loop_6_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_1
      = MUX1HOT_v_32_3_2(Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_1_sva_1,
      shift_reg_10_1_lpi_2, shift_reg_4_1_lpi_2, {Shift_Accum_Loop_else_or_nl , Shift_Accum_Loop_else_and_23_nl
      , Shift_Accum_Loop_else_and_24_nl});
  assign Shift_Accum_Loop_4_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_1
      = MUX_v_32_7_2x1x2x4x5(shift_reg_0_lpi_2, shift_reg_6_1_lpi_2, shift_reg_12_1_lpi_2,
      Shift_Accum_Loop_else_acc_4_tmp);
  assign Shift_Accum_Loop_2_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_2
      = MUX_v_32_8_2x0x2x3x5x6(shift_reg_2_lpi_2, shift_reg_8_1_lpi_2, shift_reg_14_1_lpi_2,
      Shift_Accum_Loop_else_acc_tmp);
  assign or_dcpl_15 = (Shift_Accum_Loop_else_acc_tmp[2]) | (i_3_1_sva[1:0]!=2'b10);
  assign or_dcpl_17 = (Shift_Accum_Loop_else_acc_tmp!=3'b100);
  assign and_dcpl_11 = ~((Shift_Accum_Loop_else_acc_4_tmp[2:1]!=2'b00));
  assign or_tmp_13 = (~ (fsm_output[1])) | or_dcpl_15;
  assign or_tmp_14 = (~ (fsm_output[1])) | or_dcpl_17;
  assign or_tmp_15 = ~((fsm_output[1]) & (Shift_Accum_Loop_else_acc_tmp==3'b111));
  always @(posedge clk) begin
    if ( rst ) begin
      x_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( or_cse ) begin
      x_sva <= x_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_11_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ((Shift_Accum_Loop_acc_5_tmp[0]) ^ (Shift_Accum_Loop_acc_5_tmp[1]))
        & (Shift_Accum_Loop_else_acc_tmp[1:0]==2'b11) & (fsm_output[1]) ) begin
      shift_reg_11_1_lpi_2 <= Shift_Accum_Loop_6_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_5_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~((~ (fsm_output[1])) | (Shift_Accum_Loop_acc_5_tmp[3]) | (Shift_Accum_Loop_acc_5_tmp[0])
        | (~ (Shift_Accum_Loop_acc_5_tmp[1]))) ) begin
      shift_reg_5_1_lpi_2 <= Shift_Accum_Loop_6_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      y_rsci_idat <= 32'b00000000000000000000000000000000;
    end
    else if ( reg_y_and_cse ) begin
      y_rsci_idat <= acc_1_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      acc_1_sva <= 32'b00000000000000000000000000000000;
    end
    else if ( (fsm_output[0]) | (fsm_output[8]) | (fsm_output[3]) | (fsm_output[2])
        ) begin
      acc_1_sva <= MUX_v_32_2_2(32'b00000000000000000000000000000000, c_c_mux_nl,
          acc_not_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      i_3_1_sva <= 3'b000;
    end
    else if ( (fsm_output[0]) | (fsm_output[8]) | (fsm_output[1]) ) begin
      i_3_1_sva <= MUX_v_3_2_2(3'b000, (Shift_Accum_Loop_acc_5_tmp[2:0]), not_44_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~ or_tmp_13 ) begin
      shift_reg_1_lpi_2 <= Shift_Accum_Loop_4_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_7_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~ or_tmp_14 ) begin
      shift_reg_7_1_lpi_2 <= Shift_Accum_Loop_4_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_13_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~ or_tmp_15 ) begin
      shift_reg_13_1_lpi_2 <= Shift_Accum_Loop_4_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_3_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~ or_tmp_13 ) begin
      shift_reg_3_1_lpi_2 <= Shift_Accum_Loop_2_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_9_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~ or_tmp_14 ) begin
      shift_reg_9_1_lpi_2 <= Shift_Accum_Loop_2_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_15_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~ or_tmp_15 ) begin
      shift_reg_15_lpi_2 <= Shift_Accum_Loop_2_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_ctmp_sva_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_x_triosy_obj_ld_cse <= 1'b0;
      Shift_Accum_Loop_else_slc_c_rom_1_9_0_3_sva <= 1'b0;
      Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_1_sva
          <= 32'b00000000000000000000000000000000;
      Shift_Accum_Loop_else_slc_c_rom_1_9_8_1_3_sva <= 8'b00000000;
      Shift_Accum_Loop_3_else_mul_itm <= 32'b00000000000000000000000000000000;
    end
    else begin
      reg_x_triosy_obj_ld_cse <= reg_y_and_cse;
      Shift_Accum_Loop_else_slc_c_rom_1_9_0_3_sva <= (ROM_1i4_1o1_1e46b35caa07da454b89170b85ee29092e_1
          & (~ (fsm_output[7]))) | (~((fsm_output[1]) | (fsm_output[7])));
      Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_1_sva
          <= Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_1_sva_1;
      Shift_Accum_Loop_else_slc_c_rom_1_9_8_1_3_sva <= ROM_1i4_1o8_955be7665f071fc6a758ae941ce549492e_1;
      Shift_Accum_Loop_3_else_mul_itm <= z_out;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_0_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~((~ (fsm_output[1])) | Shift_Accum_Loop_Shift_Accum_Loop_or_cse) )
        begin
      shift_reg_0_lpi_2 <= x_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_6_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( (fsm_output[1]) & (Shift_Accum_Loop_else_acc_4_tmp[0]) ) begin
      shift_reg_6_1_lpi_2 <= Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_5_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_12_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~((~ (fsm_output[1])) | and_dcpl_11 | (Shift_Accum_Loop_else_acc_4_tmp[0]))
        ) begin
      shift_reg_12_1_lpi_2 <= Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_5_sva_mx0w0;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_4_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~ or_tmp_13 ) begin
      shift_reg_4_1_lpi_2 <= Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_1_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_10_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~ or_tmp_14 ) begin
      shift_reg_10_1_lpi_2 <= Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_1_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_2_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~ or_tmp_13 ) begin
      shift_reg_2_lpi_2 <= Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_3_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_8_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~ or_tmp_14 ) begin
      shift_reg_8_1_lpi_2 <= Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_3_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_14_1_lpi_2 <= 32'b00000000000000000000000000000000;
    end
    else if ( ~ or_tmp_15 ) begin
      shift_reg_14_1_lpi_2 <= Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_3_sva_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      Shift_Accum_Loop_if_acc_2_itm_31_6 <= 26'b00000000000000000000000000;
    end
    else if ( ~ (fsm_output[2]) ) begin
      Shift_Accum_Loop_if_acc_2_itm_31_6 <= nl_Shift_Accum_Loop_if_acc_2_itm_31_6[25:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      Shift_Accum_Loop_else_slc_c_rom_1_9_0_5_sva <= 1'b0;
    end
    else if ( ~ (fsm_output[2]) ) begin
      Shift_Accum_Loop_else_slc_c_rom_1_9_0_5_sva <= ROM_1i3_1o1_f7ba941876a382c68fe43bcd1ee66d4b2f_1;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      Shift_Accum_Loop_5_else_slc_c_rom_1_Shift_Accum_Loop_else_slc_i_4_0_1_tmp_10_9_2_sdt_sva_7
          <= 1'b0;
    end
    else if ( ~ (fsm_output[2]) ) begin
      Shift_Accum_Loop_5_else_slc_c_rom_1_Shift_Accum_Loop_else_slc_i_4_0_1_tmp_10_9_2_sdt_sva_7
          <= ROM_1i3_1o8_133a9585274dfea49db057dda259647a2f_1[7];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      Shift_Accum_Loop_5_else_slc_c_rom_1_Shift_Accum_Loop_else_slc_i_4_0_1_tmp_10_9_2_sdt_sva_4_3
          <= 2'b00;
    end
    else if ( ~ (fsm_output[2]) ) begin
      Shift_Accum_Loop_5_else_slc_c_rom_1_Shift_Accum_Loop_else_slc_i_4_0_1_tmp_10_9_2_sdt_sva_4_3
          <= ROM_1i3_1o8_133a9585274dfea49db057dda259647a2f_1[4:3];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      Shift_Accum_Loop_5_else_slc_c_rom_1_Shift_Accum_Loop_else_slc_i_4_0_1_tmp_10_9_2_sdt_sva_1_0
          <= 2'b00;
    end
    else if ( ~ (fsm_output[2]) ) begin
      Shift_Accum_Loop_5_else_slc_c_rom_1_Shift_Accum_Loop_else_slc_i_4_0_1_tmp_10_9_2_sdt_sva_1_0
          <= ROM_1i3_1o8_133a9585274dfea49db057dda259647a2f_1[1:0];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_5_sva
          <= 32'b00000000000000000000000000000000;
    end
    else if ( ~ (fsm_output[2]) ) begin
      Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_5_sva
          <= MUX_v_32_2_2(Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_5_sva_mx0w0,
          z_out_2, and_86_nl);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      Shift_Accum_Loop_slc_Shift_Accum_Loop_5_acc_1_4_1_psp_sva_3 <= 1'b0;
    end
    else if ( fsm_output[1] ) begin
      Shift_Accum_Loop_slc_Shift_Accum_Loop_5_acc_1_4_1_psp_sva_3 <= Shift_Accum_Loop_acc_5_tmp[3];
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      Shift_Accum_Loop_unequal_tmp <= 1'b0;
    end
    else if ( fsm_output[1] ) begin
      Shift_Accum_Loop_unequal_tmp <= Shift_Accum_Loop_Shift_Accum_Loop_or_cse;
    end
  end
  assign nl_Shift_Accum_Loop_3_else_acc_2_nl = z_out_1 + acc_1_sva;
  assign Shift_Accum_Loop_3_else_acc_2_nl = nl_Shift_Accum_Loop_3_else_acc_2_nl[31:0];
  assign c_or_nl = and_30_cse | and_32_cse;
  assign c_c_mux_nl = MUX_v_32_2_2(Shift_Accum_Loop_3_else_acc_2_nl, z_out_1, c_or_nl);
  assign acc_not_nl = ~ or_cse;
  assign not_44_nl = ~ or_cse;
  assign nl_Shift_Accum_Loop_if_acc_2_itm_31_6  = (x_sva[27:2]) + (x_sva[25:0]);
  assign and_86_nl = and_dcpl_11 & (~ (Shift_Accum_Loop_else_acc_4_tmp[0])) & (fsm_output[1]);
  assign Shift_Accum_Loop_else_mux1h_24_nl = MUX1HOT_s_1_3_2((Shift_Accum_Loop_else_slc_c_rom_1_9_8_1_3_sva[7]),
      Shift_Accum_Loop_5_else_slc_c_rom_1_Shift_Accum_Loop_else_slc_i_4_0_1_tmp_10_9_2_sdt_sva_7,
      (ROM_1i3_1o8_2d123223ee79ddb35a7e944ae29bbc822e_1[7]), {(fsm_output[2]) , (fsm_output[3])
      , (fsm_output[1])});
  assign Shift_Accum_Loop_else_mux1h_25_nl = MUX1HOT_v_2_3_2((Shift_Accum_Loop_else_slc_c_rom_1_9_8_1_3_sva[6:5]),
      2'b01, (ROM_1i3_1o8_2d123223ee79ddb35a7e944ae29bbc822e_1[6:5]), {(fsm_output[2])
      , (fsm_output[3]) , (fsm_output[1])});
  assign Shift_Accum_Loop_else_mux1h_26_nl = MUX1HOT_v_2_3_2((Shift_Accum_Loop_else_slc_c_rom_1_9_8_1_3_sva[4:3]),
      Shift_Accum_Loop_5_else_slc_c_rom_1_Shift_Accum_Loop_else_slc_i_4_0_1_tmp_10_9_2_sdt_sva_4_3,
      (ROM_1i3_1o8_2d123223ee79ddb35a7e944ae29bbc822e_1[4:3]), {(fsm_output[2]) ,
      (fsm_output[3]) , (fsm_output[1])});
  assign Shift_Accum_Loop_else_mux_17_nl = MUX_s_1_2_2((Shift_Accum_Loop_else_slc_c_rom_1_9_8_1_3_sva[2]),
      (ROM_1i3_1o8_2d123223ee79ddb35a7e944ae29bbc822e_1[2]), fsm_output[1]);
  assign Shift_Accum_Loop_else_Shift_Accum_Loop_else_or_2_nl = Shift_Accum_Loop_else_mux_17_nl
      | (fsm_output[3]);
  assign Shift_Accum_Loop_else_mux1h_27_nl = MUX1HOT_v_2_3_2((Shift_Accum_Loop_else_slc_c_rom_1_9_8_1_3_sva[1:0]),
      Shift_Accum_Loop_5_else_slc_c_rom_1_Shift_Accum_Loop_else_slc_i_4_0_1_tmp_10_9_2_sdt_sva_1_0,
      (ROM_1i3_1o8_2d123223ee79ddb35a7e944ae29bbc822e_1[1:0]), {(fsm_output[2]) ,
      (fsm_output[3]) , (fsm_output[1])});
  assign Shift_Accum_Loop_else_mux_18_nl = MUX_s_1_2_2(Shift_Accum_Loop_else_slc_c_rom_1_9_0_3_sva,
      Shift_Accum_Loop_else_slc_c_rom_1_9_0_5_sva, fsm_output[3]);
  assign Shift_Accum_Loop_else_Shift_Accum_Loop_else_and_2_nl = Shift_Accum_Loop_else_mux_18_nl
      & (~ (fsm_output[1]));
  assign Shift_Accum_Loop_else_mux1h_28_nl = MUX1HOT_s_1_3_2(Shift_Accum_Loop_else_slc_c_rom_1_9_0_3_sva,
      Shift_Accum_Loop_else_slc_c_rom_1_9_0_5_sva, ROM_1i3_1o1_5732f0ee6b7576225f9c4c2ad0c12dfd2f_1,
      {(fsm_output[2]) , (fsm_output[3]) , (fsm_output[1])});
  assign Shift_Accum_Loop_else_mux1h_29_nl = MUX1HOT_v_32_3_2(Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_1_sva,
      Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_5_sva,
      Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_3_sva_1,
      {(fsm_output[2]) , (fsm_output[3]) , (fsm_output[1])});
  assign nl_z_out = $signed(({Shift_Accum_Loop_else_mux1h_24_nl , Shift_Accum_Loop_else_mux1h_25_nl
      , Shift_Accum_Loop_else_mux1h_26_nl , Shift_Accum_Loop_else_Shift_Accum_Loop_else_or_2_nl
      , Shift_Accum_Loop_else_mux1h_27_nl , 1'b0 , Shift_Accum_Loop_else_Shift_Accum_Loop_else_and_2_nl
      , Shift_Accum_Loop_else_mux1h_28_nl})) * $signed(conv_u2s_32_33(Shift_Accum_Loop_else_mux1h_29_nl));
  assign z_out = nl_z_out[31:0];
  assign Shift_Accum_Loop_else_mux1h_30_nl = MUX1HOT_v_32_3_2(z_out, acc_1_sva, z_out_2,
      {(fsm_output[2]) , and_30_cse , and_32_cse});
  assign Shift_Accum_Loop_else_mux1h_31_nl = MUX1HOT_v_32_3_2(Shift_Accum_Loop_3_else_mul_itm,
      z_out, Shift_Accum_Loop_else_Shift_Accum_Loop_else_slc_shift_reg_32_31_0_1_cse_5_sva,
      {(fsm_output[2]) , and_30_cse , and_32_cse});
  assign nl_z_out_1 = Shift_Accum_Loop_else_mux1h_30_nl + Shift_Accum_Loop_else_mux1h_31_nl;
  assign z_out_1 = nl_z_out_1[31:0];
  assign Shift_Accum_Loop_if_mux_6_nl = MUX_v_26_2_2(Shift_Accum_Loop_if_acc_2_itm_31_6,
      (~ (x_sva[31:6])), fsm_output[1]);
  assign Shift_Accum_Loop_if_mux_7_nl = MUX_v_2_2_2((x_sva[1:0]), (~ (x_sva[5:4])),
      fsm_output[1]);
  assign Shift_Accum_Loop_if_mux_8_nl = MUX_v_4_2_2(4'b0100, (~ (x_sva[3:0])), fsm_output[1]);
  assign Shift_Accum_Loop_if_mux_9_nl = MUX_v_30_2_2((acc_1_sva[31:2]), (~ (x_sva[29:0])),
      fsm_output[1]);
  assign Shift_Accum_Loop_if_mux_10_nl = MUX_v_2_2_2((acc_1_sva[1:0]), 2'b01, fsm_output[1]);
  assign nl_z_out_2 = ({Shift_Accum_Loop_if_mux_6_nl , Shift_Accum_Loop_if_mux_7_nl
      , Shift_Accum_Loop_if_mux_8_nl}) + ({Shift_Accum_Loop_if_mux_9_nl , Shift_Accum_Loop_if_mux_10_nl});
  assign z_out_2 = nl_z_out_2[31:0];

  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [1:0] MUX1HOT_v_2_3_2;
    input [1:0] input_2;
    input [1:0] input_1;
    input [1:0] input_0;
    input [2:0] sel;
    reg [1:0] result;
  begin
    result = input_0 & {2{sel[0]}};
    result = result | (input_1 & {2{sel[1]}});
    result = result | (input_2 & {2{sel[2]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function automatic [31:0] MUX1HOT_v_32_3_2;
    input [31:0] input_2;
    input [31:0] input_1;
    input [31:0] input_0;
    input [2:0] sel;
    reg [31:0] result;
  begin
    result = input_0 & {32{sel[0]}};
    result = result | (input_1 & {32{sel[1]}});
    result = result | (input_2 & {32{sel[2]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [25:0] MUX_v_26_2_2;
    input [25:0] input_0;
    input [25:0] input_1;
    input  sel;
    reg [25:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_26_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [29:0] MUX_v_30_2_2;
    input [29:0] input_0;
    input [29:0] input_1;
    input  sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_2_2;
    input [31:0] input_0;
    input [31:0] input_1;
    input  sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_3_2x0;
    input [31:0] input_1;
    input [31:0] input_2;
    input [1:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      2'b01 : begin
        result = input_1;
      end
      default : begin
        result = input_2;
      end
    endcase
    MUX_v_32_3_2x0 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_7_2x1x2x4x5;
    input [31:0] input_0;
    input [31:0] input_3;
    input [31:0] input_6;
    input [2:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b011 : begin
        result = input_3;
      end
      default : begin
        result = input_6;
      end
    endcase
    MUX_v_32_7_2x1x2x4x5 = result;
  end
  endfunction


  function automatic [31:0] MUX_v_32_8_2x0x2x3x5x6;
    input [31:0] input_1;
    input [31:0] input_4;
    input [31:0] input_7;
    input [2:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      3'b001 : begin
        result = input_1;
      end
      3'b100 : begin
        result = input_4;
      end
      default : begin
        result = input_7;
      end
    endcase
    MUX_v_32_8_2x0x2x3x5x6 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input  sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [32:0] conv_u2s_32_33 ;
    input [31:0]  vector ;
  begin
    conv_u2s_32_33 =  {1'b0, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    fir
// ------------------------------------------------------------------


module fir (
  clk, rst, y_rsc_dat, y_triosy_lz, x_rsc_dat, x_triosy_lz
);
  input clk;
  input rst;
  output [31:0] y_rsc_dat;
  output y_triosy_lz;
  input [31:0] x_rsc_dat;
  output x_triosy_lz;



  // Interconnect Declarations for Component Instantiations 
  fir_core fir_core_inst (
      .clk(clk),
      .rst(rst),
      .y_rsc_dat(y_rsc_dat),
      .y_triosy_lz(y_triosy_lz),
      .x_rsc_dat(x_rsc_dat),
      .x_triosy_lz(x_triosy_lz)
    );
endmodule



